!function(e){var t={};function s(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,s),i.l=!0,i.exports}s.m=e,s.c=t,s.d=function(e,t,n){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(s.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)s.d(n,i,function(t){return e[t]}.bind(null,i));return n},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=0)}([function(e,t,s){"use strict";s.r(t);class n{constructor(){this.observers=[]}addObserver(e){this.observers.push(e)}delObserver(e){this.observers.splice(this.observers.indexOf(e))}notifyAll(e,t){for(var s=0;s<this.observers.length;s++)this.observers[s].on(this,e,t)}}class i extends n{constructor(){super();const e=document.getElementById("button");this.input_field=document.getElementById("input"),this.messagesBox=document.getElementById("messages"),this.autorizate=document.getElementById("autorizate"),this.aoutowindow=document.getElementById("autenfication"),this.username=document.getElementById("username"),this.password=document.getElementById("password"),autorizate.addEventListener("click",function(e){this.aoutowindow.style.display="none",this.notifyAll("somebody wants to came in",[this.username.value,this.password.value])}.bind(this)),e.addEventListener("click",function(e){this.notifyAll("user_wants_to_send",this.input_field.value)}.bind(this)),this.input_field.addEventListener("keyup",function(e){13===e.keyCode&&this.notifyAll("user_wants_to_send",this.input_field.value)}.bind(this))}putMessageIntoDoc(e){this.messagesBox.appendChild(this.messageInDiv(e)),this.input_field.value="";let t=this.messagesBox.scrollHeight;this.messagesBox.scrollTop=t}messageInDiv(e){const t=document.createElement("div");t.className="bubble";const s=document.createElement("div");s.className="message_content";const n=document.createElement("div");return n.className="message_info",s.innerHTML=e.content,n.innerHTML=e.date,t.appendChild(s),t.appendChild(n),t}on(e,t,s){"view_take_this"==t&&this.putMessageIntoDoc(s),"log in"==t&&(console.log("logiiiiin"),this.aoutowindow.style.display="none")}}class o{constructor(e){const t=new Date,s=t.getFullYear()+"-"+(t.getMonth()+1)+"-"+t.getDate()+" "+(t.getHours()+":"+t.getMinutes()+":"+t.getSeconds());this.date=s,this.content=e}}class r extends n{constructor(){super(),this.messages=[]}addMessage(e){this.messages.push(new o(e))}putLastMessageIntoView(){this.notifyAll("view_take_this",this.messages[this.messages.length-1])}on(e,t,s){"data_ok_lets_send_it"==t&&(this.addMessage(s),this.putLastMessageIntoView())}}class a extends n{constructor(){super()}on(e,t,s){"user_wants_to_send"==t&&this.checkData(s)&&this.notifyAll("data_ok_lets_send_it",s),s&&this.Security(s)&&this.notifyAll("log in",s)}checkData(e){if(""!=e)return!0}Security(e){return"admin"!=e[0]?(console.log(e[0]),!1):"admin"==e[1]||(console.log(e[1]),!1)}}window.addEventListener("DOMContentLoaded",(function(){const e=new i,t=new r,s=new a;e.addObserver(s),t.addObserver(s),t.addObserver(e),s.addObserver(t)}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,